buildscript {
    repositories {
        if (!System.getenv("CI")?.trim()) {
            maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        } else {
            mavenCentral()
        }
    }
    dependencies {
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.4.16"
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-grammarkit-plugin:2020.1"
    }
}

plugins {
    id 'scala'
}

apply plugin: "org.jetbrains.intellij"
apply plugin: "org.jetbrains.grammarkit"

group 'tech.phosphorus'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    if (!System.getenv("CI")?.trim()) {
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/central/' }
    } else {
        mavenCentral()
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(ScalaCompile) {
            scalaCompileOptions.deprecation = false
        }
    }
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    if (!System.getenv("CI")?.trim()) {
        localPath "C:/Users/Phosphorus15/AppData/Local/JetBrains/Toolbox/apps/IDEA-U/ch-0/193.6494.35"
        plugins ["PsiViewer"]
    } else {
        version "IU-2019.3.3"
    }
}

sourceSets.main.scala.srcDirs = ['src/main/gen', 'src/main/scala']

import org.jetbrains.grammarkit.tasks.*

task generatePrologLexer(type: GenerateLexer) {
    source = "src/main/lang/prologLexer.flex"

    targetDir = "src/main/gen/tech/phosphorus/intellij/prolog"

    targetClass = "PrologLexer"

    purgeOldFiles = true
}

task generatePrologParser(type: GenerateParser) {
    // source bnf file
    source = "src/main/lang/prolog.bnf"

    // optional, task-specific root for the generated files. Default: none
    targetRoot = 'src/main/gen'

    // path to a parser file, relative to the targetRoot
    pathToParser = 'tech/phosphorus/intellij/prolog/psi/PrologParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = 'tech/phosphorus/intellij/prolog/psi/'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}

task "generateDirs" {
    sourceSets*.scala.srcDirs*.each {
        it.mkdirs()
    }
}

patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}
